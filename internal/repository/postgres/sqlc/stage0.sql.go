// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stage0.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStage0 = `-- name: CreateStage0 :one
WITH added_stage0 AS (
  INSERT INTO stage0_results (result_id)
  VALUES ($1)
  RETURNING id, result_id, status, series1, series2, series3, series4, series5, shooter_sign, scorer_sign, created_at, updated_at
), updated_result AS (
  UPDATE results
  SET stage = '0', updated_at = NOW()
  WHERE id = $1
)
SELECT 
  added_stage0.id, 
  added_stage0.result_id, 
  added_stage0.status, 
  added_stage0.series1, 
  added_stage0.series2, 
  added_stage0.series3, 
  added_stage0.series4, 
  added_stage0.series5, 
  added_stage0.shooter_sign,
  added_stage0.scorer_sign,
  added_stage0.created_at, 
  added_stage0.updated_at
FROM added_stage0
`

type CreateStage0Row struct {
	ID          pgtype.UUID
	ResultID    pgtype.UUID
	Status      Stage0Status
	Series1     string
	Series2     string
	Series3     string
	Series4     string
	Series5     string
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) CreateStage0(ctx context.Context, resultID pgtype.UUID) (CreateStage0Row, error) {
	row := q.db.QueryRow(ctx, createStage0, resultID)
	var i CreateStage0Row
	err := row.Scan(
		&i.ID,
		&i.ResultID,
		&i.Status,
		&i.Series1,
		&i.Series2,
		&i.Series3,
		&i.Series4,
		&i.Series5,
		&i.ShooterSign,
		&i.ScorerSign,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStage0ById = `-- name: GetStage0ById :one
SELECT 
  stage0_results.id, 
  stage0_results.result_id, 
  stage0_results.status, 
  stage0_results.series1, 
  stage0_results.series2, 
  stage0_results.series3, 
  stage0_results.series4, 
  stage0_results.series5,
  stage0_results.shooter_sign,
  stage0_results.scorer_sign,
  stage0_results.created_at,
  stage0_results.updated_at
FROM stage0_results
WHERE stage0_results.id = $1
`

func (q *Queries) GetStage0ById(ctx context.Context, id pgtype.UUID) (Stage0Result, error) {
	row := q.db.QueryRow(ctx, getStage0ById, id)
	var i Stage0Result
	err := row.Scan(
		&i.ID,
		&i.ResultID,
		&i.Status,
		&i.Series1,
		&i.Series2,
		&i.Series3,
		&i.Series4,
		&i.Series5,
		&i.ShooterSign,
		&i.ScorerSign,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStage0RelationByResultId = `-- name: GetStage0RelationByResultId :one
SELECT 
  stage0_results.id, 
  stage0_results.result_id
FROM stage0_results
WHERE stage0_results.result_id = $1
`

type GetStage0RelationByResultIdRow struct {
	ID       pgtype.UUID
	ResultID pgtype.UUID
}

func (q *Queries) GetStage0RelationByResultId(ctx context.Context, resultID pgtype.UUID) (GetStage0RelationByResultIdRow, error) {
	row := q.db.QueryRow(ctx, getStage0RelationByResultId, resultID)
	var i GetStage0RelationByResultIdRow
	err := row.Scan(&i.ID, &i.ResultID)
	return i, err
}

const getStage0Status = `-- name: GetStage0Status :one
SELECT 
  stage0_results.status
FROM stage0_results
WHERE stage0_results.id = $1
`

func (q *Queries) GetStage0Status(ctx context.Context, id pgtype.UUID) (Stage0Status, error) {
	row := q.db.QueryRow(ctx, getStage0Status, id)
	var status Stage0Status
	err := row.Scan(&status)
	return status, err
}

const updateStage0Finish = `-- name: UpdateStage0Finish :one
UPDATE stage0_results
SET status = '6', shooter_sign = $2, scorer_sign = $3, updated_at = NOW()
WHERE id = $1
RETURNING status, shooter_sign, scorer_sign
`

type UpdateStage0FinishParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

type UpdateStage0FinishRow struct {
	Status      Stage0Status
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage0Finish(ctx context.Context, arg UpdateStage0FinishParams) (UpdateStage0FinishRow, error) {
	row := q.db.QueryRow(ctx, updateStage0Finish, arg.ID, arg.ShooterSign, arg.ScorerSign)
	var i UpdateStage0FinishRow
	err := row.Scan(&i.Status, &i.ShooterSign, &i.ScorerSign)
	return i, err
}

const updateStage0NextSeries = `-- name: UpdateStage0NextSeries :one
UPDATE stage0_results
SET status = $2, updated_at = NOW()
WHERE id = $1 
RETURNING status
`

type UpdateStage0NextSeriesParams struct {
	ID     pgtype.UUID
	Status Stage0Status
}

// (scorer role)
func (q *Queries) UpdateStage0NextSeries(ctx context.Context, arg UpdateStage0NextSeriesParams) (Stage0Status, error) {
	row := q.db.QueryRow(ctx, updateStage0NextSeries, arg.ID, arg.Status)
	var status Stage0Status
	err := row.Scan(&status)
	return status, err
}

const updateStage0Series1 = `-- name: UpdateStage0Series1 :one
UPDATE stage0_results
SET series1 = $2, updated_at = NOW()
WHERE id = $1
RETURNING series1
`

type UpdateStage0Series1Params struct {
	ID      pgtype.UUID
	Series1 string
}

// (scorer role)
func (q *Queries) UpdateStage0Series1(ctx context.Context, arg UpdateStage0Series1Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage0Series1, arg.ID, arg.Series1)
	var series1 string
	err := row.Scan(&series1)
	return series1, err
}

const updateStage0Series2 = `-- name: UpdateStage0Series2 :one
UPDATE stage0_results
SET series2 = $2, updated_at = NOW()
WHERE id = $1
RETURNING series2
`

type UpdateStage0Series2Params struct {
	ID      pgtype.UUID
	Series2 string
}

// (scorer role)
func (q *Queries) UpdateStage0Series2(ctx context.Context, arg UpdateStage0Series2Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage0Series2, arg.ID, arg.Series2)
	var series2 string
	err := row.Scan(&series2)
	return series2, err
}

const updateStage0Series3 = `-- name: UpdateStage0Series3 :one
UPDATE stage0_results
SET series3 = $2, updated_at = NOW()
WHERE id = $1
RETURNING series3
`

type UpdateStage0Series3Params struct {
	ID      pgtype.UUID
	Series3 string
}

// (scorer role)
func (q *Queries) UpdateStage0Series3(ctx context.Context, arg UpdateStage0Series3Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage0Series3, arg.ID, arg.Series3)
	var series3 string
	err := row.Scan(&series3)
	return series3, err
}

const updateStage0Series4 = `-- name: UpdateStage0Series4 :one
UPDATE stage0_results
SET series4 = $2, updated_at = NOW()
WHERE id = $1 
RETURNING series4
`

type UpdateStage0Series4Params struct {
	ID      pgtype.UUID
	Series4 string
}

// (scorer role)
func (q *Queries) UpdateStage0Series4(ctx context.Context, arg UpdateStage0Series4Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage0Series4, arg.ID, arg.Series4)
	var series4 string
	err := row.Scan(&series4)
	return series4, err
}

const updateStage0Series5 = `-- name: UpdateStage0Series5 :one
UPDATE stage0_results
SET series5 = $2, updated_at = NOW()
WHERE id = $1 
RETURNING series5
`

type UpdateStage0Series5Params struct {
	ID      pgtype.UUID
	Series5 string
}

// (scorer role)
func (q *Queries) UpdateStage0Series5(ctx context.Context, arg UpdateStage0Series5Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage0Series5, arg.ID, arg.Series5)
	var series5 string
	err := row.Scan(&series5)
	return series5, err
}
