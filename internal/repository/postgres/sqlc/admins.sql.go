// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: admins.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :one
WITH added_user AS (
  INSERT INTO users (username, password, name)
  VALUES ($2, $3, $4)
  RETURNING id, username, password, name, created_at, updated_at
), added_admin AS (
  INSERT INTO admins (user_id, exam_id)
  SELECT id, $1 FROM added_user
  RETURNING id, user_id, exam_id
)
SELECT added_admin.id, user_id, exam_id, username, name, created_at, updated_at FROM added_user
INNER JOIN added_admin ON added_user.id = user_id
`

type CreateAdminParams struct {
	ExamID   pgtype.UUID
	Username string
	Password string
	Name     string
}

type CreateAdminRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	ExamID    pgtype.UUID
	Username  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// untuk ngebuat admin (super role) TODO: return sebanyak get admin by id
func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (CreateAdminRow, error) {
	row := q.db.QueryRow(ctx, createAdmin,
		arg.ExamID,
		arg.Username,
		arg.Password,
		arg.Name,
	)
	var i CreateAdminRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExamID,
		&i.Username,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminById = `-- name: GetAdminById :one
SELECT admins.id, user_id, exam_id, username, name, created_at, updated_at FROM admins
INNER JOIN users ON admins.user_id = users.id
WHERE admins.id = $1
`

type GetAdminByIdRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	ExamID    pgtype.UUID
	Username  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// untuk ngambil data akun admin berdasarkan id (super role)
func (q *Queries) GetAdminById(ctx context.Context, id pgtype.UUID) (GetAdminByIdRow, error) {
	row := q.db.QueryRow(ctx, getAdminById, id)
	var i GetAdminByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExamID,
		&i.Username,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminByUserId = `-- name: GetAdminByUserId :one
SELECT admins.id, user_id, exam_id, username, password, name, created_at, updated_at FROM users
INNER JOIN admins ON admins.user_id = users.id
WHERE user_id = $1
`

type GetAdminByUserIdRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	ExamID    pgtype.UUID
	Username  string
	Password  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// untuk ngambil data lengkap admin berdasarkan user id (admin role)
func (q *Queries) GetAdminByUserId(ctx context.Context, userID pgtype.UUID) (GetAdminByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getAdminByUserId, userID)
	var i GetAdminByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExamID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminByUsername = `-- name: GetAdminByUsername :one
SELECT admins.id, user_id, exam_id, username, password, name, created_at, updated_at FROM users
INNER JOIN admins ON admins.user_id = users.id
WHERE username = $1
`

type GetAdminByUsernameRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	ExamID    pgtype.UUID
	Username  string
	Password  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// untuk ngambil data display admin berdasarkan username (admin role)
func (q *Queries) GetAdminByUsername(ctx context.Context, username string) (GetAdminByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getAdminByUsername, username)
	var i GetAdminByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExamID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminRelationById = `-- name: GetAdminRelationById :one
SELECT admins.id, user_id, exam_id FROM admins 
INNER JOIN users ON admins.user_id = users.id
WHERE admins.id = $1
`

// untuk ngambil data relasi admin berdasarkan id (all role)
func (q *Queries) GetAdminRelationById(ctx context.Context, id pgtype.UUID) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminRelationById, id)
	var i Admin
	err := row.Scan(&i.ID, &i.UserID, &i.ExamID)
	return i, err
}

const getAdminRelationByUserId = `-- name: GetAdminRelationByUserId :one
SELECT admins.id, user_id, exam_id FROM admins
INNER JOIN users ON admins.user_id = users.id
WHERE user_id = $1
`

// untuk ngambil data relasi admin berdasarkan user id (all role)
func (q *Queries) GetAdminRelationByUserId(ctx context.Context, userID pgtype.UUID) (Admin, error) {
	row := q.db.QueryRow(ctx, getAdminRelationByUserId, userID)
	var i Admin
	err := row.Scan(&i.ID, &i.UserID, &i.ExamID)
	return i, err
}

const getAdminsByExamId = `-- name: GetAdminsByExamId :many
SELECT admins.id, name FROM admins 
INNER JOIN users ON admins.user_id = users.id
WHERE exam_id = $1
`

type GetAdminsByExamIdRow struct {
	ID   pgtype.UUID
	Name string
}

// untuk ngambil data akun seluruh admin dalam satu exam (super role)
func (q *Queries) GetAdminsByExamId(ctx context.Context, examID pgtype.UUID) ([]GetAdminsByExamIdRow, error) {
	rows, err := q.db.Query(ctx, getAdminsByExamId, examID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAdminsByExamIdRow
	for rows.Next() {
		var i GetAdminsByExamIdRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT exams.name AS exam, users.name AS name FROM admins
INNER JOIN users ON admins.user_id = users.id
INNER JOIN exams ON admins.exam_id = exams.id
`

type GetAllAdminsRow struct {
	Exam string
	Name string
}

// untuk ngambil data display seluruh admin (all role)
func (q *Queries) GetAllAdmins(ctx context.Context) ([]GetAllAdminsRow, error) {
	rows, err := q.db.Query(ctx, getAllAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAdminsRow
	for rows.Next() {
		var i GetAllAdminsRow
		if err := rows.Scan(&i.Exam, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :one
WITH updated_user AS (
  UPDATE users 
  SET username = $2, password = $3, name = $4, updated_at = NOW()
  WHERE users.id = (
    SELECT user_id FROM admins 
    WHERE admins.id = $1
  )
  RETURNING id
)
SELECT admins.id, user_id, exam_id, username, name, created_at, updated_at FROM admins
INNER JOIN users ON admins.user_id = users.id
WHERE user_id = (
  SELECT id FROM updated_user
)
`

type UpdateAdminParams struct {
	ID       pgtype.UUID
	Username string
	Password string
	Name     string
}

type UpdateAdminRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	ExamID    pgtype.UUID
	Username  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// untuk update data akun admin (super role)
func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) (UpdateAdminRow, error) {
	row := q.db.QueryRow(ctx, updateAdmin,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Name,
	)
	var i UpdateAdminRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ExamID,
		&i.Username,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAdminName = `-- name: UpdateAdminName :one
UPDATE users 
SET name = $2, updated_at = NOW() 
WHERE user_id = (
  SELECT user_id FROM admins 
  WHERE admins.id = $1
)
RETURNING id
`

type UpdateAdminNameParams struct {
	ID   pgtype.UUID
	Name string
}

// low prio
func (q *Queries) UpdateAdminName(ctx context.Context, arg UpdateAdminNameParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateAdminName, arg.ID, arg.Name)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}

const updateAdminPassword = `-- name: UpdateAdminPassword :one
UPDATE users 
SET password = $2, updated_at = NOW() 
WHERE user_id = (
  SELECT user_id FROM admins 
  WHERE admins.id = $1
)
RETURNING id
`

type UpdateAdminPasswordParams struct {
	ID       pgtype.UUID
	Password string
}

// low prio
func (q *Queries) UpdateAdminPassword(ctx context.Context, arg UpdateAdminPasswordParams) (pgtype.UUID, error) {
	row := q.db.QueryRow(ctx, updateAdminPassword, arg.ID, arg.Password)
	var id pgtype.UUID
	err := row.Scan(&id)
	return id, err
}
