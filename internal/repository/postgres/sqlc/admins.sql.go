// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: admins.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :exec
WITH added_user AS (
  INSERT INTO users (username, password, name)
  VALUES ($1, $2, $3)
  RETURNING id
)
INSERT INTO admins (user_id)
SELECT id FROM added_user
`

type CreateAdminParams struct {
	Username string
	Password string
	Name     string
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) error {
	_, err := q.db.Exec(ctx, createAdmin, arg.Username, arg.Password, arg.Name)
	return err
}

const getAdminById = `-- name: GetAdminById :one
SELECT admins.id, user_id, username, name, created_at, updated_at FROM admins
INNER JOIN users ON admins.user_id = users.id
WHERE admins.id = $1
`

type GetAdminByIdRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	Username  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetAdminById(ctx context.Context, id pgtype.UUID) (GetAdminByIdRow, error) {
	row := q.db.QueryRow(ctx, getAdminById, id)
	var i GetAdminByIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAdminByUserId = `-- name: GetAdminByUserId :one
SELECT admins.id, user_id, username, name FROM admins
INNER JOIN users ON admins.user_id = users.id
WHERE user_id = $1
`

type GetAdminByUserIdRow struct {
	ID       pgtype.UUID
	UserID   pgtype.UUID
	Username string
	Name     string
}

func (q *Queries) GetAdminByUserId(ctx context.Context, userID pgtype.UUID) (GetAdminByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getAdminByUserId, userID)
	var i GetAdminByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Name,
	)
	return i, err
}

const getAdminByUsername = `-- name: GetAdminByUsername :one
SELECT admins.id, user_id, username, password, name FROM users
INNER JOIN admins ON admins.user_id = users.id
WHERE username = $1
`

type GetAdminByUsernameRow struct {
	ID       pgtype.UUID
	UserID   pgtype.UUID
	Username string
	Password string
	Name     string
}

func (q *Queries) GetAdminByUsername(ctx context.Context, username string) (GetAdminByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getAdminByUsername, username)
	var i GetAdminByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Name,
	)
	return i, err
}

const getAdminData = `-- name: GetAdminData :one
SELECT admins.id, name, created_at, updated_at FROM admins
INNER JOIN users ON admins.user_id = users.id
WHERE admins.id = $1
`

type GetAdminDataRow struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetAdminData(ctx context.Context, id pgtype.UUID) (GetAdminDataRow, error) {
	row := q.db.QueryRow(ctx, getAdminData, id)
	var i GetAdminDataRow
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getAllAdmins = `-- name: GetAllAdmins :many
SELECT admins.id, name, created_at, updated_at FROM admins
INNER JOIN users ON admins.user_id = users.id
`

type GetAllAdminsRow struct {
	ID        pgtype.UUID
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) GetAllAdmins(ctx context.Context) ([]GetAllAdminsRow, error) {
	rows, err := q.db.Query(ctx, getAllAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllAdminsRow
	for rows.Next() {
		var i GetAllAdminsRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAdmin = `-- name: UpdateAdmin :exec
UPDATE users 
SET username = $2, password = $3, name = $4, updated_at = NOW()
WHERE users.id = (
  SELECT user_id FROM admins 
  WHERE admins.id = $1
)
`

type UpdateAdminParams struct {
	ID       pgtype.UUID
	Username string
	Password string
	Name     string
}

func (q *Queries) UpdateAdmin(ctx context.Context, arg UpdateAdminParams) error {
	_, err := q.db.Exec(ctx, updateAdmin,
		arg.ID,
		arg.Username,
		arg.Password,
		arg.Name,
	)
	return err
}

const updateAdminName = `-- name: UpdateAdminName :exec
UPDATE users 
SET name = $2, updated_at = NOW() 
WHERE user_id = (
  SELECT user_id FROM admins 
  WHERE admins.id = $1
)
`

type UpdateAdminNameParams struct {
	ID   pgtype.UUID
	Name string
}

func (q *Queries) UpdateAdminName(ctx context.Context, arg UpdateAdminNameParams) error {
	_, err := q.db.Exec(ctx, updateAdminName, arg.ID, arg.Name)
	return err
}

const updateAdminPassword = `-- name: UpdateAdminPassword :exec
UPDATE users 
SET password = $2, updated_at = NOW() 
WHERE user_id = (
  SELECT user_id FROM admins 
  WHERE admins.id = $1
)
`

type UpdateAdminPasswordParams struct {
	ID       pgtype.UUID
	Password string
}

func (q *Queries) UpdateAdminPassword(ctx context.Context, arg UpdateAdminPasswordParams) error {
	_, err := q.db.Exec(ctx, updateAdminPassword, arg.ID, arg.Password)
	return err
}
