// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: admins.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgconn"
	"github.com/jackc/pgx/v5/pgtype"
)

const createAdmin = `-- name: CreateAdmin :execresult
WITH added_user AS (
  INSERT INTO users (username, password, name)
  VALUES ($1, $2, $3)
  RETURNING id
)
INSERT INTO admins (user_id)
SELECT id FROM added_user
`

type CreateAdminParams struct {
	Username string
	Password string
	Name     string
}

func (q *Queries) CreateAdmin(ctx context.Context, arg CreateAdminParams) (pgconn.CommandTag, error) {
	return q.db.Exec(ctx, createAdmin, arg.Username, arg.Password, arg.Name)
}

const deleteAdmin = `-- name: DeleteAdmin :exec
DELETE FROM admins WHERE user_id = $1
`

func (q *Queries) DeleteAdmin(ctx context.Context, userID pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteAdmin, userID)
	return err
}

const getAdminByUserId = `-- name: GetAdminByUserId :one
SELECT admins.id, user_id, username, name FROM admins
INNER JOIN users ON admins.user_id = users.id
WHERE user_id = $1
`

type GetAdminByUserIdRow struct {
	ID       pgtype.UUID
	UserID   pgtype.UUID
	Username string
	Name     string
}

func (q *Queries) GetAdminByUserId(ctx context.Context, userID pgtype.UUID) (GetAdminByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getAdminByUserId, userID)
	var i GetAdminByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Name,
	)
	return i, err
}

const getAdminByUsername = `-- name: GetAdminByUsername :one
SELECT admins.id, user_id, username, name FROM users
INNER JOIN admins ON admins.user_id = users.id
WHERE username = $1
`

type GetAdminByUsernameRow struct {
	ID       pgtype.UUID
	UserID   pgtype.UUID
	Username string
	Name     string
}

func (q *Queries) GetAdminByUsername(ctx context.Context, username string) (GetAdminByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getAdminByUsername, username)
	var i GetAdminByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Name,
	)
	return i, err
}

const getAdmins = `-- name: GetAdmins :many
SELECT admins.id, user_id, username, name FROM admins
INNER JOIN users ON admins.user_id = users.id
`

type GetAdminsRow struct {
	ID       pgtype.UUID
	UserID   pgtype.UUID
	Username string
	Name     string
}

func (q *Queries) GetAdmins(ctx context.Context) ([]GetAdminsRow, error) {
	rows, err := q.db.Query(ctx, getAdmins)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAdminsRow
	for rows.Next() {
		var i GetAdminsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Username,
			&i.Name,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
