// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: results.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createResult = `-- name: CreateResult :one
INSERT INTO results (shooter_id)
VALUES ($1)
RETURNING id, shooter_id, failed, stage, created_at, updated_at
`

// (all role)
func (q *Queries) CreateResult(ctx context.Context, shooterID pgtype.UUID) (Result, error) {
	row := q.db.QueryRow(ctx, createResult, shooterID)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ShooterID,
		&i.Failed,
		&i.Stage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteResult = `-- name: DeleteResult :exec
DELETE FROM results
WHERE id = $1
`

// (admin-super role) dibuat by id
func (q *Queries) DeleteResult(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteResult, id)
	return err
}

const getResultById = `-- name: GetResultById :one
SELECT id, shooter_id, failed, stage, created_at, updated_at
FROM results
WHERE id = $1
`

func (q *Queries) GetResultById(ctx context.Context, id pgtype.UUID) (Result, error) {
	row := q.db.QueryRow(ctx, getResultById, id)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ShooterID,
		&i.Failed,
		&i.Stage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResultRelationAndStatusByShooterId = `-- name: GetResultRelationAndStatusByShooterId :one
SELECT id, shooter_id, stage, failed
FROM results
WHERE shooter_id = $1
`

type GetResultRelationAndStatusByShooterIdRow struct {
	ID        pgtype.UUID
	ShooterID pgtype.UUID
	Stage     Stages
	Failed    bool
}

func (q *Queries) GetResultRelationAndStatusByShooterId(ctx context.Context, shooterID pgtype.UUID) (GetResultRelationAndStatusByShooterIdRow, error) {
	row := q.db.QueryRow(ctx, getResultRelationAndStatusByShooterId, shooterID)
	var i GetResultRelationAndStatusByShooterIdRow
	err := row.Scan(
		&i.ID,
		&i.ShooterID,
		&i.Stage,
		&i.Failed,
	)
	return i, err
}

const getResultsByExamId = `-- name: GetResultsByExamId :many
SELECT shooters.id, shooters.name, shooters.province, shooters.club, results.failed, results.stage
FROM results 
JOIN shooters ON results.shooter_id = shooters.id 
JOIN scorers ON shooters.scorer_id = scorers.id
JOIN exams ON scorers.exam_id = exams.id
WHERE exams.id = $1
`

type GetResultsByExamIdRow struct {
	ID       pgtype.UUID
	Name     string
	Province string
	Club     string
	Failed   bool
	Stage    Stages
}

// (admin-super role)
func (q *Queries) GetResultsByExamId(ctx context.Context, id pgtype.UUID) ([]GetResultsByExamIdRow, error) {
	rows, err := q.db.Query(ctx, getResultsByExamId, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResultsByExamIdRow
	for rows.Next() {
		var i GetResultsByExamIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Province,
			&i.Club,
			&i.Failed,
			&i.Stage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getResultsByScorerId = `-- name: GetResultsByScorerId :many
SELECT shooters.id, shooters.name, shooters.province, shooters.club, results.failed, results.stage 
FROM results 
JOIN shooters ON results.shooter_id = shooters.id 
WHERE shooters.scorer_id = $1
`

type GetResultsByScorerIdRow struct {
	ID       pgtype.UUID
	Name     string
	Province string
	Club     string
	Failed   bool
	Stage    Stages
}

// (all role)
func (q *Queries) GetResultsByScorerId(ctx context.Context, scorerID pgtype.UUID) ([]GetResultsByScorerIdRow, error) {
	rows, err := q.db.Query(ctx, getResultsByScorerId, scorerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetResultsByScorerIdRow
	for rows.Next() {
		var i GetResultsByScorerIdRow
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Province,
			&i.Club,
			&i.Failed,
			&i.Stage,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateResult = `-- name: UpdateResult :one
UPDATE results 
SET failed = $2, stage = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, shooter_id, failed, stage, created_at, updated_at
`

type UpdateResultParams struct {
	ID     pgtype.UUID
	Failed bool
	Stage  Stages
}

// (admin-super role) dibuat by id
func (q *Queries) UpdateResult(ctx context.Context, arg UpdateResultParams) (Result, error) {
	row := q.db.QueryRow(ctx, updateResult, arg.ID, arg.Failed, arg.Stage)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ShooterID,
		&i.Failed,
		&i.Stage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateResultStage = `-- name: UpdateResultStage :exec
UPDATE results 
SET stage = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateResultStageParams struct {
	ID    pgtype.UUID
	Stage Stages
}

// (admin-super role) utk edge case kalo delete stage yang terakir, mundurin ke stage sebelum
func (q *Queries) UpdateResultStage(ctx context.Context, arg UpdateResultStageParams) error {
	_, err := q.db.Exec(ctx, updateResultStage, arg.ID, arg.Stage)
	return err
}
