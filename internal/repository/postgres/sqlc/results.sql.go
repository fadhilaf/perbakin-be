// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: results.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createResult = `-- name: CreateResult :one
INSERT INTO results (shooter_id)
VALUES ($1)
RETURNING id, shooter_id, failed, stage, created_at, updated_at
`

// (all role)
func (q *Queries) CreateResult(ctx context.Context, shooterID pgtype.UUID) (Result, error) {
	row := q.db.QueryRow(ctx, createResult, shooterID)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ShooterID,
		&i.Failed,
		&i.Stage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteResult = `-- name: DeleteResult :exec
DELETE FROM results
WHERE id = $1
`

// (admin-super role) dibuat by id
func (q *Queries) DeleteResult(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteResult, id)
	return err
}

const getResultById = `-- name: GetResultById :one
SELECT id, shooter_id, failed, stage, created_at, updated_at
FROM results
WHERE id = $1
`

func (q *Queries) GetResultById(ctx context.Context, id pgtype.UUID) (Result, error) {
	row := q.db.QueryRow(ctx, getResultById, id)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ShooterID,
		&i.Failed,
		&i.Stage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getResultRelationByShooterId = `-- name: GetResultRelationByShooterId :one
SELECT id, shooter_id
FROM results
WHERE shooter_id = $1
`

type GetResultRelationByShooterIdRow struct {
	ID        pgtype.UUID
	ShooterID pgtype.UUID
}

func (q *Queries) GetResultRelationByShooterId(ctx context.Context, shooterID pgtype.UUID) (GetResultRelationByShooterIdRow, error) {
	row := q.db.QueryRow(ctx, getResultRelationByShooterId, shooterID)
	var i GetResultRelationByShooterIdRow
	err := row.Scan(&i.ID, &i.ShooterID)
	return i, err
}

const getResultStatusById = `-- name: GetResultStatusById :one
SELECT failed, stage
FROM results
WHERE id = $1
`

type GetResultStatusByIdRow struct {
	Failed bool
	Stage  Stages
}

func (q *Queries) GetResultStatusById(ctx context.Context, id pgtype.UUID) (GetResultStatusByIdRow, error) {
	row := q.db.QueryRow(ctx, getResultStatusById, id)
	var i GetResultStatusByIdRow
	err := row.Scan(&i.Failed, &i.Stage)
	return i, err
}

const updateResult = `-- name: UpdateResult :one
UPDATE results 
SET failed = $2, stage = $3, updated_at = NOW()
WHERE id = $1
RETURNING id, shooter_id, failed, stage, created_at, updated_at
`

type UpdateResultParams struct {
	ID     pgtype.UUID
	Failed bool
	Stage  Stages
}

// (admin-super role) dibuat by id
func (q *Queries) UpdateResult(ctx context.Context, arg UpdateResultParams) (Result, error) {
	row := q.db.QueryRow(ctx, updateResult, arg.ID, arg.Failed, arg.Stage)
	var i Result
	err := row.Scan(
		&i.ID,
		&i.ShooterID,
		&i.Failed,
		&i.Stage,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
