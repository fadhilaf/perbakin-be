// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: supers.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const getAllSupers = `-- name: GetAllSupers :many
SELECT supers.id, name FROM supers
INNER JOIN users ON supers.user_id = users.id
`

type GetAllSupersRow struct {
	ID   pgtype.UUID
	Name string
}

// untuk ngambil data display seluruh super admin (all role)
func (q *Queries) GetAllSupers(ctx context.Context) ([]GetAllSupersRow, error) {
	rows, err := q.db.Query(ctx, getAllSupers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetAllSupersRow
	for rows.Next() {
		var i GetAllSupersRow
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSuperByUserId = `-- name: GetSuperByUserId :one
SELECT supers.id, user_id, username, password, name, created_at, updated_at FROM users
INNER JOIN supers ON supers.user_id = users.id
WHERE user_id = $1
`

type GetSuperByUserIdRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	Username  string
	Password  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// untuk ngambil data lengkap super admin berdasarkan user id (super role)
func (q *Queries) GetSuperByUserId(ctx context.Context, userID pgtype.UUID) (GetSuperByUserIdRow, error) {
	row := q.db.QueryRow(ctx, getSuperByUserId, userID)
	var i GetSuperByUserIdRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSuperByUsername = `-- name: GetSuperByUsername :one
SELECT supers.id, user_id, username, password, name, created_at, updated_at FROM users
INNER JOIN supers ON supers.user_id = users.id
WHERE username = $1
`

type GetSuperByUsernameRow struct {
	ID        pgtype.UUID
	UserID    pgtype.UUID
	Username  string
	Password  string
	Name      string
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// untuk ngambil data display super admin berdasarkan username (super role)
func (q *Queries) GetSuperByUsername(ctx context.Context, username string) (GetSuperByUsernameRow, error) {
	row := q.db.QueryRow(ctx, getSuperByUsername, username)
	var i GetSuperByUsernameRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Username,
		&i.Password,
		&i.Name,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSuperRelationByUserId = `-- name: GetSuperRelationByUserId :one
SELECT supers.id, user_id FROM users
INNER JOIN supers ON supers.user_id = users.id
WHERE user_id = $1
`

// untuk ngambil data relasi super admin berdasarkan user id (all role)
func (q *Queries) GetSuperRelationByUserId(ctx context.Context, userID pgtype.UUID) (Super, error) {
	row := q.db.QueryRow(ctx, getSuperRelationByUserId, userID)
	var i Super
	err := row.Scan(&i.ID, &i.UserID)
	return i, err
}
