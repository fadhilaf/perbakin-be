// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stage1_try1.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStage1 = `-- name: CreateStage1 :one
INSERT INTO stage1_results (result_id)
VALUES ($1)
RETURNING 
  id, 
  result_id, 
  ( try1 ).status,
  ( try1 ).no1.scores,
  ( try1 ).no1.duration,
  ( try1 ).no2.scores,
  ( try1 ).no2.duration,
  ( try1 ).no3.scores,
  ( try1 ).no3.duration,
  ( try1 ).no4.scores,
  ( try1 ).no4.duration,
  ( try1 ).no5.scores,
  ( try1 ).no5.duration,
  ( try1 ).no6.scores,
  ( try1 ).no6.duration,
  ( try1 ).checkmarks,
  created_at,
  updated_at
`

type CreateStage1Row struct {
	ID        pgtype.UUID
	ResultID  pgtype.UUID
	Column3   interface{}
	Column4   interface{}
	Column5   interface{}
	Column6   interface{}
	Column7   interface{}
	Column8   interface{}
	Column9   interface{}
	Column10  interface{}
	Column11  interface{}
	Column12  interface{}
	Column13  interface{}
	Column14  interface{}
	Column15  interface{}
	Column16  interface{}
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

func (q *Queries) CreateStage1(ctx context.Context, resultID pgtype.UUID) (CreateStage1Row, error) {
	row := q.db.QueryRow(ctx, createStage1, resultID)
	var i CreateStage1Row
	err := row.Scan(
		&i.ID,
		&i.ResultID,
		&i.Column3,
		&i.Column4,
		&i.Column5,
		&i.Column6,
		&i.Column7,
		&i.Column8,
		&i.Column9,
		&i.Column10,
		&i.Column11,
		&i.Column12,
		&i.Column13,
		&i.Column14,
		&i.Column15,
		&i.Column16,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStage1 = `-- name: DeleteStage1 :exec
WITH deleted_stage1 AS (
  DELETE FROM stage1_results
  WHERE stage1_results.id = $1
  RETURNING result_id
)
UPDATE results 
SET stage = '1', updated_at = NOW()
WHERE id = (SELECT result_id FROM deleted_stage1)
`

// (admin-super role)
func (q *Queries) DeleteStage1(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStage1, id)
	return err
}

const getStage1try1ById = `-- name: GetStage1try1ById :one
SELECT 
  id,
  result_id, 
  ( try1 ).status,
  ( try1 ).no1.scores,
  ( try1 ).no1.duration,
  ( try1 ).no2.scores,
  ( try1 ).no2.duration,
  ( try1 ).no3.scores,
  ( try1 ).no3.duration,
  ( try1 ).no4.scores,
  ( try1 ).no4.duration,
  ( try1 ).no5.scores,
  ( try1 ).no5.duration,
  ( try1 ).no6.scores,
  ( try1 ).no6.duration,
  ( try1 ).checkmarks,
  created_at,
  updated_at
FROM stage1_results
WHERE id = $1
`

type GetStage1try1ByIdRow struct {
	ID        pgtype.UUID
	ResultID  pgtype.UUID
	Column3   interface{}
	Column4   interface{}
	Column5   interface{}
	Column6   interface{}
	Column7   interface{}
	Column8   interface{}
	Column9   interface{}
	Column10  interface{}
	Column11  interface{}
	Column12  interface{}
	Column13  interface{}
	Column14  interface{}
	Column15  interface{}
	Column16  interface{}
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// (all role)
func (q *Queries) GetStage1try1ById(ctx context.Context, id pgtype.UUID) (GetStage1try1ByIdRow, error) {
	row := q.db.QueryRow(ctx, getStage1try1ById, id)
	var i GetStage1try1ByIdRow
	err := row.Scan(
		&i.ID,
		&i.ResultID,
		&i.Column3,
		&i.Column4,
		&i.Column5,
		&i.Column6,
		&i.Column7,
		&i.Column8,
		&i.Column9,
		&i.Column10,
		&i.Column11,
		&i.Column12,
		&i.Column13,
		&i.Column14,
		&i.Column15,
		&i.Column16,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStage1try1RelationByResultId = `-- name: GetStage1try1RelationByResultId :one
SELECT 
  id, 
  result_id
FROM stage1_results
WHERE result_id = $1
`

type GetStage1try1RelationByResultIdRow struct {
	ID       pgtype.UUID
	ResultID pgtype.UUID
}

// (all role)
func (q *Queries) GetStage1try1RelationByResultId(ctx context.Context, resultID pgtype.UUID) (GetStage1try1RelationByResultIdRow, error) {
	row := q.db.QueryRow(ctx, getStage1try1RelationByResultId, resultID)
	var i GetStage1try1RelationByResultIdRow
	err := row.Scan(&i.ID, &i.ResultID)
	return i, err
}

const getStage1try1Status = `-- name: GetStage1try1Status :one
SELECT 
  ( try1 ).status
FROM stage1_results
WHERE id = $1
`

func (q *Queries) GetStage1try1Status(ctx context.Context, id pgtype.UUID) (interface{}, error) {
	row := q.db.QueryRow(ctx, getStage1try1Status, id)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const updateStage1FinishFailed = `-- name: UpdateStage1FinishFailed :exec
WITH updated_stage1 AS (
  UPDATE stage1_results
  SET try1.status = '7', shooter_sign = $2, scorer_sign = $3, updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING result_id
)
UPDATE results 
SET failed = true, updated_at = NOW()
WHERE id = (SELECT result_id FROM updated_stage1)
`

type UpdateStage1FinishFailedParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage1FinishFailed(ctx context.Context, arg UpdateStage1FinishFailedParams) error {
	_, err := q.db.Exec(ctx, updateStage1FinishFailed, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage1FinishSuccess = `-- name: UpdateStage1FinishSuccess :exec
WITH updated_stage1 AS (
  UPDATE stage1_results
  SET try1.status = '7', shooter_sign = $2, scorer_sign = $3, updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING result_id
)
UPDATE results 
SET stage = '2', updated_at = NOW()
WHERE id = (SELECT result_id FROM updated_stage1)
`

type UpdateStage1FinishSuccessParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage1FinishSuccess(ctx context.Context, arg UpdateStage1FinishSuccessParams) error {
	_, err := q.db.Exec(ctx, updateStage1FinishSuccess, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage1Signs = `-- name: UpdateStage1Signs :one
UPDATE stage1_results 
SET 
  shooter_sign = $2, 
  scorer_sign = $3, 
  updated_at = NOW()
WHERE id = $1
RETURNING shooter_sign, scorer_sign, updated_at
`

type UpdateStage1SignsParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

type UpdateStage1SignsRow struct {
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
	UpdatedAt   pgtype.Timestamp
}

// (admin-super role)
func (q *Queries) UpdateStage1Signs(ctx context.Context, arg UpdateStage1SignsParams) (UpdateStage1SignsRow, error) {
	row := q.db.QueryRow(ctx, updateStage1Signs, arg.ID, arg.ShooterSign, arg.ScorerSign)
	var i UpdateStage1SignsRow
	err := row.Scan(&i.ShooterSign, &i.ScorerSign, &i.UpdatedAt)
	return i, err
}

const updateStage1try1 = `-- name: UpdateStage1try1 :one
UPDATE stage1_results
SET 
  try1.status = $2,
  try1.no1.scores = $3, try1.no1.duration = $4,
  try1.no2.scores = $5, try1.no2.duration = $6,
  try1.no3.scores = $7, try1.no3.duration = $8,
  try1.no4.scores = $9, try1.no4.duration = $10,
  try1.no5.scores = $11, try1.no5.duration = $12,
  try1.no6.scores = $13, try1.no6.duration = $14,
  try1.checkmarks = $15,
  updated_at = NOW()
WHERE id = $1 
RETURNING 
  ( try1 ).status,
  ( try1 ).no1.scores,
  ( try1 ).no1.duration,
  ( try1 ).no2.scores,
  ( try1 ).no2.duration,
  ( try1 ).no3.scores,
  ( try1 ).no3.duration,
  ( try1 ).no4.scores,
  ( try1 ).no4.duration,
  ( try1 ).no5.scores,
  ( try1 ).no5.duration,
  ( try1 ).no6.scores,
  ( try1 ).no6.duration,
  ( try1 ).checkmarks,
  created_at,
  updated_at
`

type UpdateStage1try1Params struct {
	ID      pgtype.UUID
	Try1    string
	Try1_2  string
	Try1_3  string
	Try1_4  string
	Try1_5  string
	Try1_6  string
	Try1_7  string
	Try1_8  string
	Try1_9  string
	Try1_10 string
	Try1_11 string
	Try1_12 string
	Try1_13 string
	Try1_14 string
}

type UpdateStage1try1Row struct {
	Column1   interface{}
	Column2   interface{}
	Column3   interface{}
	Column4   interface{}
	Column5   interface{}
	Column6   interface{}
	Column7   interface{}
	Column8   interface{}
	Column9   interface{}
	Column10  interface{}
	Column11  interface{}
	Column12  interface{}
	Column13  interface{}
	Column14  interface{}
	CreatedAt pgtype.Timestamp
	UpdatedAt pgtype.Timestamp
}

// (scorer role)
func (q *Queries) UpdateStage1try1(ctx context.Context, arg UpdateStage1try1Params) (UpdateStage1try1Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try1,
		arg.ID,
		arg.Try1,
		arg.Try1_2,
		arg.Try1_3,
		arg.Try1_4,
		arg.Try1_5,
		arg.Try1_6,
		arg.Try1_7,
		arg.Try1_8,
		arg.Try1_9,
		arg.Try1_10,
		arg.Try1_11,
		arg.Try1_12,
		arg.Try1_13,
		arg.Try1_14,
	)
	var i UpdateStage1try1Row
	err := row.Scan(
		&i.Column1,
		&i.Column2,
		&i.Column3,
		&i.Column4,
		&i.Column5,
		&i.Column6,
		&i.Column7,
		&i.Column8,
		&i.Column9,
		&i.Column10,
		&i.Column11,
		&i.Column12,
		&i.Column13,
		&i.Column14,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStage1try1Checkmarks = `-- name: UpdateStage1try1Checkmarks :one
UPDATE stage1_results
SET 
  try1.checkmarks = $2, 
  updated_at = NOW()
WHERE id = $1
RETURNING ( try1 ).checkmarks
`

type UpdateStage1try1CheckmarksParams struct {
	ID   pgtype.UUID
	Try1 string
}

// (scorer role)
func (q *Queries) UpdateStage1try1Checkmarks(ctx context.Context, arg UpdateStage1try1CheckmarksParams) (interface{}, error) {
	row := q.db.QueryRow(ctx, updateStage1try1Checkmarks, arg.ID, arg.Try1)
	var column_1 interface{}
	err := row.Scan(&column_1)
	return column_1, err
}

const updateStage1try1NextNo = `-- name: UpdateStage1try1NextNo :exec
UPDATE stage1_results
SET try1.status = $2, updated_at = NOW()
WHERE id = $1
`

type UpdateStage1try1NextNoParams struct {
	ID   pgtype.UUID
	Try1 string
}

// (scorer role)
func (q *Queries) UpdateStage1try1NextNo(ctx context.Context, arg UpdateStage1try1NextNoParams) error {
	_, err := q.db.Exec(ctx, updateStage1try1NextNo, arg.ID, arg.Try1)
	return err
}

const updateStage1try1No1 = `-- name: UpdateStage1try1No1 :one
UPDATE stage1_results
SET try1.no1.scores = $2, try1.no1.duration = $3, updated_at = NOW()
WHERE id = $1 
RETURNING ( try1 ).no1.scores, ( try1 ).no1.duration
`

type UpdateStage1try1No1Params struct {
	ID     pgtype.UUID
	Try1   string
	Try1_2 string
}

type UpdateStage1try1No1Row struct {
	Column1 interface{}
	Column2 interface{}
}

// (scorer role)
func (q *Queries) UpdateStage1try1No1(ctx context.Context, arg UpdateStage1try1No1Params) (UpdateStage1try1No1Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try1No1, arg.ID, arg.Try1, arg.Try1_2)
	var i UpdateStage1try1No1Row
	err := row.Scan(&i.Column1, &i.Column2)
	return i, err
}

const updateStage1try1No2 = `-- name: UpdateStage1try1No2 :one
UPDATE stage1_results
SET try1.no2.scores = $2, try1.no2.duration = $3, updated_at = NOW()
WHERE id = $1 
RETURNING ( try1 ).no2.scores, ( try1 ).no2.duration
`

type UpdateStage1try1No2Params struct {
	ID     pgtype.UUID
	Try1   string
	Try1_2 string
}

type UpdateStage1try1No2Row struct {
	Column1 interface{}
	Column2 interface{}
}

// (scorer role)
func (q *Queries) UpdateStage1try1No2(ctx context.Context, arg UpdateStage1try1No2Params) (UpdateStage1try1No2Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try1No2, arg.ID, arg.Try1, arg.Try1_2)
	var i UpdateStage1try1No2Row
	err := row.Scan(&i.Column1, &i.Column2)
	return i, err
}

const updateStage1try1No3 = `-- name: UpdateStage1try1No3 :one
UPDATE stage1_results
SET try1.no3.scores = $2, try1.no3.duration = $3, updated_at = NOW()
WHERE id = $1 
RETURNING ( try1 ).no3.scores, ( try1 ).no3.duration
`

type UpdateStage1try1No3Params struct {
	ID     pgtype.UUID
	Try1   string
	Try1_2 string
}

type UpdateStage1try1No3Row struct {
	Column1 interface{}
	Column2 interface{}
}

// (scorer role)
func (q *Queries) UpdateStage1try1No3(ctx context.Context, arg UpdateStage1try1No3Params) (UpdateStage1try1No3Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try1No3, arg.ID, arg.Try1, arg.Try1_2)
	var i UpdateStage1try1No3Row
	err := row.Scan(&i.Column1, &i.Column2)
	return i, err
}

const updateStage1try1No4 = `-- name: UpdateStage1try1No4 :one
UPDATE stage1_results
SET try1.no4.scores = $2, try1.no4.duration = $3, updated_at = NOW()
WHERE id = $1 
RETURNING ( try1 ).no4.scores, ( try1 ).no4.duration
`

type UpdateStage1try1No4Params struct {
	ID     pgtype.UUID
	Try1   string
	Try1_2 string
}

type UpdateStage1try1No4Row struct {
	Column1 interface{}
	Column2 interface{}
}

// (scorer role)
func (q *Queries) UpdateStage1try1No4(ctx context.Context, arg UpdateStage1try1No4Params) (UpdateStage1try1No4Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try1No4, arg.ID, arg.Try1, arg.Try1_2)
	var i UpdateStage1try1No4Row
	err := row.Scan(&i.Column1, &i.Column2)
	return i, err
}

const updateStage1try1No5 = `-- name: UpdateStage1try1No5 :one
UPDATE stage1_results
SET try1.no5.scores = $2, try1.no5.duration = $3, updated_at = NOW()
WHERE id = $1 
RETURNING ( try1 ).no5.scores, ( try1 ).no5.duration
`

type UpdateStage1try1No5Params struct {
	ID     pgtype.UUID
	Try1   string
	Try1_2 string
}

type UpdateStage1try1No5Row struct {
	Column1 interface{}
	Column2 interface{}
}

// (scorer role)
func (q *Queries) UpdateStage1try1No5(ctx context.Context, arg UpdateStage1try1No5Params) (UpdateStage1try1No5Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try1No5, arg.ID, arg.Try1, arg.Try1_2)
	var i UpdateStage1try1No5Row
	err := row.Scan(&i.Column1, &i.Column2)
	return i, err
}

const updateStage1try1No6 = `-- name: UpdateStage1try1No6 :one
UPDATE stage1_results
SET try1.no6.scores = $2, try1.no6.duration = $3, updated_at = NOW()
WHERE id = $1 
RETURNING ( try1 ).no6.scores, ( try1 ).no6.duration
`

type UpdateStage1try1No6Params struct {
	ID     pgtype.UUID
	Try1   string
	Try1_2 string
}

type UpdateStage1try1No6Row struct {
	Column1 interface{}
	Column2 interface{}
}

// (scorer role)
func (q *Queries) UpdateStage1try1No6(ctx context.Context, arg UpdateStage1try1No6Params) (UpdateStage1try1No6Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try1No6, arg.ID, arg.Try1, arg.Try1_2)
	var i UpdateStage1try1No6Row
	err := row.Scan(&i.Column1, &i.Column2)
	return i, err
}
