// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stage5_try1.sql

package postgres

import (
	"context"
	"database/sql"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStage5 = `-- name: CreateStage5 :one
WITH added_stage5_try1 AS (
  INSERT INTO stage5_tries DEFAULT VALUES
  RETURNING id, status, no1, no2, checkmarks
), added_stage5_results AS (
  INSERT INTO stage5_results (result_id, try1_id)
  SELECT $1, id FROM added_stage5_try1
  RETURNING id, result_id, try1_id, is_try2, shooter_sign, scorer_sign, created_at, updated_at
)
SELECT
  added_stage5_results.id, 
  result_id, 
  status,
  no1,
  no2,
  checkmarks,
  is_try2,
  shooter_sign,
  scorer_sign,
  created_at,
  updated_at
FROM added_stage5_try1, added_stage5_results
`

type CreateStage5Row struct {
	ID          pgtype.UUID
	ResultID    pgtype.UUID
	Status      Stage5Status
	No1         string
	No2         string
	Checkmarks  string
	IsTry2      bool
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
	CreatedAt   pgtype.Timestamp
	UpdatedAt   pgtype.Timestamp
}

func (q *Queries) CreateStage5(ctx context.Context, resultID pgtype.UUID) (CreateStage5Row, error) {
	row := q.db.QueryRow(ctx, createStage5, resultID)
	var i CreateStage5Row
	err := row.Scan(
		&i.ID,
		&i.ResultID,
		&i.Status,
		&i.No1,
		&i.No2,
		&i.Checkmarks,
		&i.IsTry2,
		&i.ShooterSign,
		&i.ScorerSign,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteStage5 = `-- name: DeleteStage5 :exec
WITH deleted_stage5 AS (
  DELETE FROM stage5_results
  WHERE stage5_results.id = $1
  RETURNING result_id, try1_id, try2_id
), deleted_stage5try1 AS (
  DELETE FROM stage5_tries
  WHERE stage5_tries.id = deleted_stage5.try1_id
)
DELETE FROM stage5_tries
WHERE stage5_tries.id = (SELECT try2_id FROM deleted_stage5 WHERE try2_id IS NOT NULL)
`

// (admin-super role)
func (q *Queries) DeleteStage5(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStage5, id)
	return err
}

const finishStage5 = `-- name: FinishStage5 :exec
WITH get_stage5 AS (
  SELECT 
    result_id, try1_id, try2_id
  FROM stage5_results
  WHERE stage5_results.id = $1
), updated_stage5try1 AS (
  UPDATE stage5_tries
  SET status = '3'
  WHERE id = (SELECT try1_id FROM get_stage5)
), updated_stage5try2 AS (
  UPDATE stage5_tries
  SET status = '3'
  WHERE id = (SELECT try2_id FROM get_stage5 WHERE try2_id IS NOT NULL)
)
UPDATE results 
SET stage = '6', updated_at = NOW()
WHERE id = (SELECT result_id FROM get_stage5)
`

// (admin-super role)
func (q *Queries) FinishStage5(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, finishStage5, id)
	return err
}

const getStage5ById = `-- name: GetStage5ById :one
SELECT 
  stage5_results.id,
  result_id, 
  try1.status AS try1_status,
  try1.no1 AS try1_no1,
  try1.no2 AS try1_no2,
  try1.checkmarks AS try1_checkmarks,
  try2.status AS try2_status,
  try2.no1 AS try2_no1,
  try2.no2 AS try2_no2,
  try2.checkmarks AS try2_checkmarks,
  is_try2,
  shooter_sign,
  scorer_sign,
  created_at,
  updated_at
FROM stage5_results
INNER JOIN stage5_tries AS try1 ON try1.id = stage5_results.try1_id
LEFT JOIN stage5_tries AS try2 ON try2.id = stage5_results.try2_id
WHERE stage5_results.id = $1
`

type GetStage5ByIdRow struct {
	ID             pgtype.UUID
	ResultID       pgtype.UUID
	Try1Status     Stage5Status
	Try1No1        string
	Try1No2        string
	Try1Checkmarks string
	Try2Status     NullStage5Status
	Try2No1        sql.NullString
	Try2No2        sql.NullString
	Try2Checkmarks sql.NullString
	IsTry2         bool
	ShooterSign    pgtype.Text
	ScorerSign     pgtype.Text
	CreatedAt      pgtype.Timestamp
	UpdatedAt      pgtype.Timestamp
}

// (all role)
func (q *Queries) GetStage5ById(ctx context.Context, id pgtype.UUID) (GetStage5ByIdRow, error) {
	row := q.db.QueryRow(ctx, getStage5ById, id)
	var i GetStage5ByIdRow
	err := row.Scan(
		&i.ID,
		&i.ResultID,
		&i.Try1Status,
		&i.Try1No1,
		&i.Try1No2,
		&i.Try1Checkmarks,
		&i.Try2Status,
		&i.Try2No1,
		&i.Try2No2,
		&i.Try2Checkmarks,
		&i.IsTry2,
		&i.ShooterSign,
		&i.ScorerSign,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getStage5RelationByResultId = `-- name: GetStage5RelationByResultId :one
SELECT 
  id, 
  result_id,
  is_try2
FROM stage5_results
WHERE result_id = $1
`

type GetStage5RelationByResultIdRow struct {
	ID       pgtype.UUID
	ResultID pgtype.UUID
	IsTry2   bool
}

// (all role)
func (q *Queries) GetStage5RelationByResultId(ctx context.Context, resultID pgtype.UUID) (GetStage5RelationByResultIdRow, error) {
	row := q.db.QueryRow(ctx, getStage5RelationByResultId, resultID)
	var i GetStage5RelationByResultIdRow
	err := row.Scan(&i.ID, &i.ResultID, &i.IsTry2)
	return i, err
}

const getStage5try1Status = `-- name: GetStage5try1Status :one
SELECT 
  status
FROM stage5_results
INNER JOIN stage5_tries ON stage5_tries.id = stage5_results.try1_id
WHERE stage5_results.id = $1
`

func (q *Queries) GetStage5try1Status(ctx context.Context, id pgtype.UUID) (Stage5Status, error) {
	row := q.db.QueryRow(ctx, getStage5try1Status, id)
	var status Stage5Status
	err := row.Scan(&status)
	return status, err
}

const getStage5try2ExistById = `-- name: GetStage5try2ExistById :one
SELECT 
  is_try2
FROM stage5_results
WHERE id = $1
`

// (all role)
func (q *Queries) GetStage5try2ExistById(ctx context.Context, id pgtype.UUID) (bool, error) {
	row := q.db.QueryRow(ctx, getStage5try2ExistById, id)
	var is_try2 bool
	err := row.Scan(&is_try2)
	return is_try2, err
}

const updateStage5NextTry = `-- name: UpdateStage5NextTry :exec
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET 
    is_try2 = true,
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try1_id
)
UPDATE stage5_tries
SET status = '3'
WHERE id = updated_stage5_results.try1_id
`

// (scorer role)
func (q *Queries) UpdateStage5NextTry(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, updateStage5NextTry, id)
	return err
}

const updateStage5Signs = `-- name: UpdateStage5Signs :one
UPDATE stage5_results 
SET 
  shooter_sign = $2, 
  scorer_sign = $3, 
  updated_at = NOW()
WHERE id = $1
RETURNING shooter_sign, scorer_sign, updated_at
`

type UpdateStage5SignsParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

type UpdateStage5SignsRow struct {
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
	UpdatedAt   pgtype.Timestamp
}

// (admin-super role)
func (q *Queries) UpdateStage5Signs(ctx context.Context, arg UpdateStage5SignsParams) (UpdateStage5SignsRow, error) {
	row := q.db.QueryRow(ctx, updateStage5Signs, arg.ID, arg.ShooterSign, arg.ScorerSign)
	var i UpdateStage5SignsRow
	err := row.Scan(&i.ShooterSign, &i.ScorerSign, &i.UpdatedAt)
	return i, err
}

const updateStage5try1 = `-- name: UpdateStage5try1 :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1 
  RETURNING try1_id, try2_id, is_try2, updated_at
), updated_stage5_try1 AS (
  UPDATE stage5_tries
  SET 
    status = $2,
    no1 = $3,
    no2 = $4,
    checkmarks = $5
  WHERE id = updated_stage5_results.try1_id
  RETURNING 
    status,
    no1,
    no2,
    checkmarks
)
SELECT 
  updated_stage5_try1.status AS try1_status,
  updated_stage5_try1.no1 AS try1_no1,
  updated_stage5_try1.no2 AS try1_no2,
  updated_stage5_try1.checkmarks AS try1_checkmarks,
  updated_at
FROM updated_stage5_results, updated_stage5_try1
`

type UpdateStage5try1Params struct {
	ID             pgtype.UUID
	Try1Status     Stage5Status
	Try1No1        string
	Try1No2        string
	Try1Checkmarks string
}

type UpdateStage5try1Row struct {
	Try1Status     Stage5Status
	Try1No1        string
	Try1No2        string
	Try1Checkmarks string
	UpdatedAt      pgtype.Timestamp
}

// (admin-super role)
func (q *Queries) UpdateStage5try1(ctx context.Context, arg UpdateStage5try1Params) (UpdateStage5try1Row, error) {
	row := q.db.QueryRow(ctx, updateStage5try1,
		arg.ID,
		arg.Try1Status,
		arg.Try1No1,
		arg.Try1No2,
		arg.Try1Checkmarks,
	)
	var i UpdateStage5try1Row
	err := row.Scan(
		&i.Try1Status,
		&i.Try1No1,
		&i.Try1No2,
		&i.Try1Checkmarks,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStage5try1Checkmarks = `-- name: UpdateStage5try1Checkmarks :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try1_id
)
UPDATE stage5_tries
SET 
  checkmarks = $2
WHERE id = updated_stage5_results.try1_id
RETURNING checkmarks
`

type UpdateStage5try1CheckmarksParams struct {
	ID         pgtype.UUID
	Checkmarks string
}

// (scorer role)
func (q *Queries) UpdateStage5try1Checkmarks(ctx context.Context, arg UpdateStage5try1CheckmarksParams) (string, error) {
	row := q.db.QueryRow(ctx, updateStage5try1Checkmarks, arg.ID, arg.Checkmarks)
	var checkmarks string
	err := row.Scan(&checkmarks)
	return checkmarks, err
}

const updateStage5try1FinishFailed = `-- name: UpdateStage5try1FinishFailed :exec
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW(), 
  	shooter_sign = $2, 
  	scorer_sign = $3
  WHERE stage5_results.id = $1
  RETURNING result_id, try1_id
), updated_stage5_tries AS (
  UPDATE stage5_tries
    SET status = '3'
  WHERE id = (SELECT try1_id FROM updated_stage5_results)
)
UPDATE results 
SET failed = true, updated_at = NOW()
WHERE id = (SELECT result_id FROM updated_stage5_results)
`

type UpdateStage5try1FinishFailedParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage5try1FinishFailed(ctx context.Context, arg UpdateStage5try1FinishFailedParams) error {
	_, err := q.db.Exec(ctx, updateStage5try1FinishFailed, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage5try1FinishSuccess = `-- name: UpdateStage5try1FinishSuccess :exec
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW(), 
  	shooter_sign = $2, 
  	scorer_sign = $3
  WHERE stage5_results.id = $1
  RETURNING result_id, try1_id
), updated_stage5_tries AS (
  UPDATE stage5_tries
    SET status = '3'
  WHERE id = (SELECT try1_id FROM updated_stage5_results)
)
UPDATE results 
SET stage = '6', updated_at = NOW()
WHERE id = (SELECT result_id FROM updated_stage5_results)
`

type UpdateStage5try1FinishSuccessParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage5try1FinishSuccess(ctx context.Context, arg UpdateStage5try1FinishSuccessParams) error {
	_, err := q.db.Exec(ctx, updateStage5try1FinishSuccess, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage5try1NextNo = `-- name: UpdateStage5try1NextNo :exec
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try1_id
)
UPDATE stage5_tries
  SET status = $2
WHERE id = updated_stage5_results.try1_id
`

type UpdateStage5try1NextNoParams struct {
	ID     pgtype.UUID
	Status Stage5Status
}

// (scorer role)
func (q *Queries) UpdateStage5try1NextNo(ctx context.Context, arg UpdateStage5try1NextNoParams) error {
	_, err := q.db.Exec(ctx, updateStage5try1NextNo, arg.ID, arg.Status)
	return err
}

const updateStage5try1No1 = `-- name: UpdateStage5try1No1 :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try1_id
)
UPDATE stage5_tries
SET no1 = $2
WHERE id = updated_stage5_results.try1_id
RETURNING no1
`

type UpdateStage5try1No1Params struct {
	ID  pgtype.UUID
	No1 string
}

// (scorer role)
func (q *Queries) UpdateStage5try1No1(ctx context.Context, arg UpdateStage5try1No1Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage5try1No1, arg.ID, arg.No1)
	var no1 string
	err := row.Scan(&no1)
	return no1, err
}

const updateStage5try1No2 = `-- name: UpdateStage5try1No2 :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try1_id
)
UPDATE stage5_tries 
SET no2 = $2
WHERE id = updated_stage5_results.try1_id
RETURNING no2
`

type UpdateStage5try1No2Params struct {
	ID  pgtype.UUID
	No2 string
}

// (scorer role)
func (q *Queries) UpdateStage5try1No2(ctx context.Context, arg UpdateStage5try1No2Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage5try1No2, arg.ID, arg.No2)
	var no2 string
	err := row.Scan(&no2)
	return no2, err
}
