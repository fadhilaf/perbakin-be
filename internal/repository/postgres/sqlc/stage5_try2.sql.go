// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stage5_try2.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStage5try2 = `-- name: CreateStage5try2 :one
WITH added_stage5_try2 AS (
  INSERT INTO stage5_tries DEFAULT VALUES
  RETURNING id, status, no1, no2, checkmarks
), updated_stage5_results AS (
  UPDATE stage5_results
  SET 
    try2_id = (SELECT id FROM added_stage5_try2),
    is_try2 = true,
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try1_id, is_try2
), updated_stage5_try1 AS (
  UPDATE stage5_tries
  SET status = '3'
  FROM updated_stage5_results
  WHERE id = updated_stage5_results.try1_id
)
SELECT 
  is_try2,
  status,
  no1,
  no2,
  checkmarks
FROM added_stage5_try2, updated_stage5_results
`

type CreateStage5try2Row struct {
	IsTry2     bool
	Status     Stage5Status
	No1        string
	No2        string
	Checkmarks string
}

func (q *Queries) CreateStage5try2(ctx context.Context, id pgtype.UUID) (CreateStage5try2Row, error) {
	row := q.db.QueryRow(ctx, createStage5try2, id)
	var i CreateStage5try2Row
	err := row.Scan(
		&i.IsTry2,
		&i.Status,
		&i.No1,
		&i.No2,
		&i.Checkmarks,
	)
	return i, err
}

const deleteStage5try2 = `-- name: DeleteStage5try2 :exec
WITH deleted_stage5_try2 AS (
  DELETE FROM stage5_tries
  WHERE stage5_tries.id = (SELECT try2_id FROM stage5_results WHERE stage5_results.id = $1)
), updated_stage5_results AS (
  UPDATE stage5_results
  SET
    try2_id = NULL,
    is_try2 = false,
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try1_id
)
UPDATE stage5_tries
SET status = '2'
FROM updated_stage5_results
WHERE stage5_tries.id = updated_stage5_results.try1_id
`

// (admin-super role)
func (q *Queries) DeleteStage5try2(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStage5try2, id)
	return err
}

const getStage5try2Status = `-- name: GetStage5try2Status :one
SELECT 
  status
FROM stage5_results
INNER JOIN stage5_tries ON stage5_tries.id = stage5_results.try2_id
WHERE stage5_results.id = $1
`

// (all role)
func (q *Queries) GetStage5try2Status(ctx context.Context, id pgtype.UUID) (Stage5Status, error) {
	row := q.db.QueryRow(ctx, getStage5try2Status, id)
	var status Stage5Status
	err := row.Scan(&status)
	return status, err
}

const updateStage5try2 = `-- name: UpdateStage5try2 :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1 
  RETURNING try1_id, try2_id, is_try2, updated_at
), updated_stage5_try1 AS (
  UPDATE stage5_tries
  SET 
    status = $2,
    no1 = $3,
    no2 = $4,
    checkmarks = $5
  FROM updated_stage5_results
  WHERE id = updated_stage5_results.try1_id
  RETURNING 
    status,
    no1,
    no2,
    checkmarks
), updated_stage5_try2 AS (
  UPDATE stage5_tries
  SET 
    status = $6,
    no1 = $7,
    no2 = $8,
    checkmarks = $9
  WHERE id = (SELECT try2_id FROM updated_stage5_results WHERE try2_id IS NOT NULL)
  RETURNING 
    status,
    no1,
    no2,
    checkmarks
)
SELECT 
  updated_stage5_try1.status AS try1_status,
  updated_stage5_try1.no1 AS try1_no1,
  updated_stage5_try1.no2 AS try1_no2,
  updated_stage5_try1.checkmarks AS try1_checkmarks,
  updated_stage5_try2.status AS try2_status,
  updated_stage5_try2.no1 AS try2_no1,
  updated_stage5_try2.no2 AS try2_no2,
  updated_stage5_try2.checkmarks AS try2_checkmarks,
  updated_at
FROM updated_stage5_results, updated_stage5_try1, updated_stage5_try2
`

type UpdateStage5try2Params struct {
	ID             pgtype.UUID
	Try1Status     Stage5Status
	Try1No1        string
	Try1No2        string
	Try1Checkmarks string
	Try2Status     Stage5Status
	Try2No1        string
	Try2No2        string
	Try2Checkmarks string
}

type UpdateStage5try2Row struct {
	Try1Status     Stage5Status
	Try1No1        string
	Try1No2        string
	Try1Checkmarks string
	Try2Status     Stage5Status
	Try2No1        string
	Try2No2        string
	Try2Checkmarks string
	UpdatedAt      pgtype.Timestamp
}

// (admin-super role)
func (q *Queries) UpdateStage5try2(ctx context.Context, arg UpdateStage5try2Params) (UpdateStage5try2Row, error) {
	row := q.db.QueryRow(ctx, updateStage5try2,
		arg.ID,
		arg.Try1Status,
		arg.Try1No1,
		arg.Try1No2,
		arg.Try1Checkmarks,
		arg.Try2Status,
		arg.Try2No1,
		arg.Try2No2,
		arg.Try2Checkmarks,
	)
	var i UpdateStage5try2Row
	err := row.Scan(
		&i.Try1Status,
		&i.Try1No1,
		&i.Try1No2,
		&i.Try1Checkmarks,
		&i.Try2Status,
		&i.Try2No1,
		&i.Try2No2,
		&i.Try2Checkmarks,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStage5try2Checkmarks = `-- name: UpdateStage5try2Checkmarks :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try2_id
)
UPDATE stage5_tries
SET 
  checkmarks = $2
FROM updated_stage5_results
WHERE id = updated_stage5_results.try2_id
RETURNING checkmarks
`

type UpdateStage5try2CheckmarksParams struct {
	ID         pgtype.UUID
	Checkmarks string
}

// (scorer role)
func (q *Queries) UpdateStage5try2Checkmarks(ctx context.Context, arg UpdateStage5try2CheckmarksParams) (string, error) {
	row := q.db.QueryRow(ctx, updateStage5try2Checkmarks, arg.ID, arg.Checkmarks)
	var checkmarks string
	err := row.Scan(&checkmarks)
	return checkmarks, err
}

const updateStage5try2FinishFailed = `-- name: UpdateStage5try2FinishFailed :exec
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW(), 
  	shooter_sign = $2, 
  	scorer_sign = $3
  WHERE stage5_results.id = $1
  RETURNING result_id, try2_id
), updated_stage5_tries AS (
  UPDATE stage5_tries
    SET status = '3'
  FROM updated_stage5_results
  WHERE id = updated_stage5_results.try2_id
)
UPDATE results 
SET failed = true, updated_at = NOW()
FROM updated_stage5_results
WHERE id = updated_stage5_results.result_id
`

type UpdateStage5try2FinishFailedParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage5try2FinishFailed(ctx context.Context, arg UpdateStage5try2FinishFailedParams) error {
	_, err := q.db.Exec(ctx, updateStage5try2FinishFailed, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage5try2FinishSuccess = `-- name: UpdateStage5try2FinishSuccess :exec
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW(), 
  	shooter_sign = $2, 
  	scorer_sign = $3
  WHERE stage5_results.id = $1
  RETURNING result_id, try2_id
), updated_stage5_tries AS (
  UPDATE stage5_tries
    SET status = '3'
  FROM updated_stage5_results
  WHERE id = updated_stage5_results.try2_id
)
UPDATE results 
SET stage = '6', updated_at = NOW()
FROM updated_stage5_results
WHERE id = updated_stage5_results.result_id
`

type UpdateStage5try2FinishSuccessParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage5try2FinishSuccess(ctx context.Context, arg UpdateStage5try2FinishSuccessParams) error {
	_, err := q.db.Exec(ctx, updateStage5try2FinishSuccess, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage5try2NextNo = `-- name: UpdateStage5try2NextNo :exec
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try2_id
)
UPDATE stage5_tries
  SET status = $2
FROM updated_stage5_results
WHERE id = updated_stage5_results.try2_id
`

type UpdateStage5try2NextNoParams struct {
	ID     pgtype.UUID
	Status Stage5Status
}

// (scorer role)
func (q *Queries) UpdateStage5try2NextNo(ctx context.Context, arg UpdateStage5try2NextNoParams) error {
	_, err := q.db.Exec(ctx, updateStage5try2NextNo, arg.ID, arg.Status)
	return err
}

const updateStage5try2No1 = `-- name: UpdateStage5try2No1 :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try2_id
)
UPDATE stage5_tries
SET no1 = $2
FROM updated_stage5_results
WHERE id = updated_stage5_results.try2_id
RETURNING no1
`

type UpdateStage5try2No1Params struct {
	ID  pgtype.UUID
	No1 string
}

// (scorer role)
func (q *Queries) UpdateStage5try2No1(ctx context.Context, arg UpdateStage5try2No1Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage5try2No1, arg.ID, arg.No1)
	var no1 string
	err := row.Scan(&no1)
	return no1, err
}

const updateStage5try2No2 = `-- name: UpdateStage5try2No2 :one
WITH updated_stage5_results AS (
  UPDATE stage5_results
  SET
    updated_at = NOW()
  WHERE stage5_results.id = $1
  RETURNING try2_id
)
UPDATE stage5_tries
SET no2 = $2
FROM updated_stage5_results
WHERE id = updated_stage5_results.try2_id
RETURNING no2
`

type UpdateStage5try2No2Params struct {
	ID  pgtype.UUID
	No2 string
}

// (scorer role)
func (q *Queries) UpdateStage5try2No2(ctx context.Context, arg UpdateStage5try2No2Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage5try2No2, arg.ID, arg.No2)
	var no2 string
	err := row.Scan(&no2)
	return no2, err
}
