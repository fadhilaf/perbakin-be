// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stage1_try2.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStage1try2 = `-- name: CreateStage1try2 :one
WITH added_stage1_try2 AS (
  INSERT INTO stage13_tries DEFAULT VALUES
  RETURNING id, status, no1, no2, no3, no4, no5, no6, checkmarks
), updated_stage1_results AS (
  UPDATE stage1_results
  SET 
    try2_id = (SELECT id FROM added_stage1_try2),
    is_try2 = true,
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try1_id, is_try2
), updated_stage1_try1 AS (
  UPDATE stage13_tries
  SET status = '7'
  FROM updated_stage1_results
  WHERE id = updated_stage1_results.try1_id
)
SELECT 
  is_try2,
  status,
  no1,
  no2,
  no3,
  no4,
  no5,
  no6,
  checkmarks
FROM added_stage1_try2, updated_stage1_results
`

type CreateStage1try2Row struct {
	IsTry2     bool
	Status     Stage13Status
	No1        string
	No2        string
	No3        string
	No4        string
	No5        string
	No6        string
	Checkmarks string
}

func (q *Queries) CreateStage1try2(ctx context.Context, id pgtype.UUID) (CreateStage1try2Row, error) {
	row := q.db.QueryRow(ctx, createStage1try2, id)
	var i CreateStage1try2Row
	err := row.Scan(
		&i.IsTry2,
		&i.Status,
		&i.No1,
		&i.No2,
		&i.No3,
		&i.No4,
		&i.No5,
		&i.No6,
		&i.Checkmarks,
	)
	return i, err
}

const deleteStage1try2 = `-- name: DeleteStage1try2 :exec
WITH deleted_stage1_try2 AS (
  DELETE FROM stage13_tries
  WHERE stage13_tries.id = (SELECT try2_id FROM stage1_results WHERE stage1_results.id = $1)
), updated_stage1_results AS (
  UPDATE stage1_results
  SET
    try2_id = NULL,
    is_try2 = false,
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try1_id
)
UPDATE stage13_tries
SET status = '6'
FROM updated_stage1_results
WHERE stage13_tries.id = updated_stage1_results.try1_id
`

// (admin-super role)
func (q *Queries) DeleteStage1try2(ctx context.Context, id pgtype.UUID) error {
	_, err := q.db.Exec(ctx, deleteStage1try2, id)
	return err
}

const getStage1try2Status = `-- name: GetStage1try2Status :one
SELECT 
  status
FROM stage1_results
INNER JOIN stage13_tries ON stage13_tries.id = stage1_results.try2_id
WHERE stage1_results.id = $1
`

// (all role)
func (q *Queries) GetStage1try2Status(ctx context.Context, id pgtype.UUID) (Stage13Status, error) {
	row := q.db.QueryRow(ctx, getStage1try2Status, id)
	var status Stage13Status
	err := row.Scan(&status)
	return status, err
}

const updateStage1try2 = `-- name: UpdateStage1try2 :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1 
  RETURNING try1_id, try2_id, is_try2, updated_at
), updated_stage1_try1 AS (
  UPDATE stage13_tries
  SET 
    status = $2,
    no1 = $3,
    no2 = $4,
    no3 = $5,
    no4 = $6,
    no5 = $7,
    no6 = $8,
    checkmarks = $9
  FROM updated_stage1_results
  WHERE id = updated_stage1_results.try1_id
  RETURNING 
    status,
    no1,
    no2,
    no3,
    no4,
    no5,
    no6,
    checkmarks
), updated_stage1_try2 AS (
  UPDATE stage13_tries
  SET 
    status = $10,
    no1 = $11,
    no2 = $12,
    no3 = $13,
    no4 = $14,
    no5 = $15,
    no6 = $16,
    checkmarks = $17
  WHERE id IN (SELECT try2_id FROM updated_stage1_results WHERE try2_id IS NOT NULL)
  RETURNING 
    status,
    no1,
    no2,
    no3,
    no4,
    no5,
    no6,
    checkmarks
)
SELECT 
  updated_stage1_try1.status AS try1_status,
  updated_stage1_try1.no1 AS try1_no1,
  updated_stage1_try1.no2 AS try1_no2,
  updated_stage1_try1.no3 AS try1_no3,
  updated_stage1_try1.no4 AS try1_no4,
  updated_stage1_try1.no5 AS try1_no5,
  updated_stage1_try1.no6 AS try1_no6,
  updated_stage1_try1.checkmarks AS try1_checkmarks,
  updated_stage1_try2.status AS try2_status,
  updated_stage1_try2.no1 AS try2_no1,
  updated_stage1_try2.no2 AS try2_no2,
  updated_stage1_try2.no3 AS try2_no3,
  updated_stage1_try2.no4 AS try2_no4,
  updated_stage1_try2.no5 AS try2_no5,
  updated_stage1_try2.no6 AS try2_no6,
  updated_stage1_try2.checkmarks AS try2_checkmarks,
  updated_at
FROM updated_stage1_results, updated_stage1_try1, updated_stage1_try2
`

type UpdateStage1try2Params struct {
	ID             pgtype.UUID
	Try1Status     Stage13Status
	Try1No1        string
	Try1No2        string
	Try1No3        string
	Try1No4        string
	Try1No5        string
	Try1No6        string
	Try1Checkmarks string
	Try2Status     Stage13Status
	Try2No1        string
	Try2No2        string
	Try2No3        string
	Try2No4        string
	Try2No5        string
	Try2No6        string
	Try2Checkmarks string
}

type UpdateStage1try2Row struct {
	Try1Status     Stage13Status
	Try1No1        string
	Try1No2        string
	Try1No3        string
	Try1No4        string
	Try1No5        string
	Try1No6        string
	Try1Checkmarks string
	Try2Status     Stage13Status
	Try2No1        string
	Try2No2        string
	Try2No3        string
	Try2No4        string
	Try2No5        string
	Try2No6        string
	Try2Checkmarks string
	UpdatedAt      pgtype.Timestamp
}

// (admin-super role)
func (q *Queries) UpdateStage1try2(ctx context.Context, arg UpdateStage1try2Params) (UpdateStage1try2Row, error) {
	row := q.db.QueryRow(ctx, updateStage1try2,
		arg.ID,
		arg.Try1Status,
		arg.Try1No1,
		arg.Try1No2,
		arg.Try1No3,
		arg.Try1No4,
		arg.Try1No5,
		arg.Try1No6,
		arg.Try1Checkmarks,
		arg.Try2Status,
		arg.Try2No1,
		arg.Try2No2,
		arg.Try2No3,
		arg.Try2No4,
		arg.Try2No5,
		arg.Try2No6,
		arg.Try2Checkmarks,
	)
	var i UpdateStage1try2Row
	err := row.Scan(
		&i.Try1Status,
		&i.Try1No1,
		&i.Try1No2,
		&i.Try1No3,
		&i.Try1No4,
		&i.Try1No5,
		&i.Try1No6,
		&i.Try1Checkmarks,
		&i.Try2Status,
		&i.Try2No1,
		&i.Try2No2,
		&i.Try2No3,
		&i.Try2No4,
		&i.Try2No5,
		&i.Try2No6,
		&i.Try2Checkmarks,
		&i.UpdatedAt,
	)
	return i, err
}

const updateStage1try2Checkmarks = `-- name: UpdateStage1try2Checkmarks :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
)
UPDATE stage13_tries
SET 
  checkmarks = $2
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
RETURNING checkmarks
`

type UpdateStage1try2CheckmarksParams struct {
	ID         pgtype.UUID
	Checkmarks string
}

// (scorer role)
func (q *Queries) UpdateStage1try2Checkmarks(ctx context.Context, arg UpdateStage1try2CheckmarksParams) (string, error) {
	row := q.db.QueryRow(ctx, updateStage1try2Checkmarks, arg.ID, arg.Checkmarks)
	var checkmarks string
	err := row.Scan(&checkmarks)
	return checkmarks, err
}

const updateStage1try2FinishFailed = `-- name: UpdateStage1try2FinishFailed :exec
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW(), 
  	shooter_sign = $2, 
  	scorer_sign = $3
  WHERE stage1_results.id = $1
  RETURNING result_id, try2_id
), updated_stage13_tries AS (
  UPDATE stage13_tries
    SET status = '7'
  FROM updated_stage1_results
  WHERE id = updated_stage1_results.try2_id
)
UPDATE results 
SET failed = true, updated_at = NOW()
FROM updated_stage1_results
WHERE id = updated_stage1_results.result_id
`

type UpdateStage1try2FinishFailedParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage1try2FinishFailed(ctx context.Context, arg UpdateStage1try2FinishFailedParams) error {
	_, err := q.db.Exec(ctx, updateStage1try2FinishFailed, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage1try2FinishSuccess = `-- name: UpdateStage1try2FinishSuccess :exec
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW(), 
  	shooter_sign = $2, 
  	scorer_sign = $3
  WHERE stage1_results.id = $1
  RETURNING result_id, try2_id
), updated_stage13_tries AS (
  UPDATE stage13_tries
    SET status = '7'
  FROM updated_stage1_results
  WHERE id = updated_stage1_results.try2_id
)
UPDATE results 
SET stage = '2', updated_at = NOW()
FROM updated_stage1_results
WHERE id = updated_stage1_results.result_id
`

type UpdateStage1try2FinishSuccessParams struct {
	ID          pgtype.UUID
	ShooterSign pgtype.Text
	ScorerSign  pgtype.Text
}

// (scorer role)
func (q *Queries) UpdateStage1try2FinishSuccess(ctx context.Context, arg UpdateStage1try2FinishSuccessParams) error {
	_, err := q.db.Exec(ctx, updateStage1try2FinishSuccess, arg.ID, arg.ShooterSign, arg.ScorerSign)
	return err
}

const updateStage1try2NextNo = `-- name: UpdateStage1try2NextNo :exec
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
)
UPDATE stage13_tries
  SET status = $2
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
`

type UpdateStage1try2NextNoParams struct {
	ID     pgtype.UUID
	Status Stage13Status
}

// (scorer role)
func (q *Queries) UpdateStage1try2NextNo(ctx context.Context, arg UpdateStage1try2NextNoParams) error {
	_, err := q.db.Exec(ctx, updateStage1try2NextNo, arg.ID, arg.Status)
	return err
}

const updateStage1try2No1 = `-- name: UpdateStage1try2No1 :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
)
UPDATE stage13_tries
SET no1 = $2
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
RETURNING no1
`

type UpdateStage1try2No1Params struct {
	ID  pgtype.UUID
	No1 string
}

// (scorer role)
func (q *Queries) UpdateStage1try2No1(ctx context.Context, arg UpdateStage1try2No1Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage1try2No1, arg.ID, arg.No1)
	var no1 string
	err := row.Scan(&no1)
	return no1, err
}

const updateStage1try2No2 = `-- name: UpdateStage1try2No2 :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
)
UPDATE stage13_tries
SET no2 = $2
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
RETURNING no2
`

type UpdateStage1try2No2Params struct {
	ID  pgtype.UUID
	No2 string
}

// (scorer role)
func (q *Queries) UpdateStage1try2No2(ctx context.Context, arg UpdateStage1try2No2Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage1try2No2, arg.ID, arg.No2)
	var no2 string
	err := row.Scan(&no2)
	return no2, err
}

const updateStage1try2No3 = `-- name: UpdateStage1try2No3 :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
) 
UPDATE stage13_tries 
SET no3 = $2 
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
RETURNING no3
`

type UpdateStage1try2No3Params struct {
	ID  pgtype.UUID
	No3 string
}

// (scorer role)
func (q *Queries) UpdateStage1try2No3(ctx context.Context, arg UpdateStage1try2No3Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage1try2No3, arg.ID, arg.No3)
	var no3 string
	err := row.Scan(&no3)
	return no3, err
}

const updateStage1try2No4 = `-- name: UpdateStage1try2No4 :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
)
UPDATE stage13_tries
SET no4 = $2
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
RETURNING no4
`

type UpdateStage1try2No4Params struct {
	ID  pgtype.UUID
	No4 string
}

// (scorer role)
func (q *Queries) UpdateStage1try2No4(ctx context.Context, arg UpdateStage1try2No4Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage1try2No4, arg.ID, arg.No4)
	var no4 string
	err := row.Scan(&no4)
	return no4, err
}

const updateStage1try2No5 = `-- name: UpdateStage1try2No5 :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
)
UPDATE stage13_tries
SET no5 = $2
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
RETURNING no5
`

type UpdateStage1try2No5Params struct {
	ID  pgtype.UUID
	No5 string
}

// (scorer role)
func (q *Queries) UpdateStage1try2No5(ctx context.Context, arg UpdateStage1try2No5Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage1try2No5, arg.ID, arg.No5)
	var no5 string
	err := row.Scan(&no5)
	return no5, err
}

const updateStage1try2No6 = `-- name: UpdateStage1try2No6 :one
WITH updated_stage1_results AS (
  UPDATE stage1_results
  SET
    updated_at = NOW()
  WHERE stage1_results.id = $1
  RETURNING try2_id
)
UPDATE stage13_tries
SET no6 = $2
FROM updated_stage1_results
WHERE id = updated_stage1_results.try2_id
RETURNING no6
`

type UpdateStage1try2No6Params struct {
	ID  pgtype.UUID
	No6 string
}

// (scorer role)
func (q *Queries) UpdateStage1try2No6(ctx context.Context, arg UpdateStage1try2No6Params) (string, error) {
	row := q.db.QueryRow(ctx, updateStage1try2No6, arg.ID, arg.No6)
	var no6 string
	err := row.Scan(&no6)
	return no6, err
}
