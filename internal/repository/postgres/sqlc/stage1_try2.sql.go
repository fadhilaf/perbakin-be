// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: stage1_try2.sql

package postgres

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createStage1try2 = `-- name: CreateStage1try2 :one
UPDATE stage1_results
SET 
  is_try2 = true,
  try2 = ROW( 
    '1',
    ROW(
      ROW(0,0,0),
      ROW(0,0,0)
    ),
    ROW(
      ROW(0,0,0),
      ROW(0,0,0)
    ),
    ROW(
      ROW(0,0,0),
      ROW(0,0,0)
    ),
    ROW(
      ROW(0,0,0),
      ROW(0,0,0)
    ),
    ROW(
      ROW(0,0,0),
      ROW(0,0,0)
    ),
    ROW(
      ROW(0,0,0),
      ROW(0,0,0)
    ),
    ROW(false,false,false,false,false,false)
  )
WHERE result_id = $1
RETURNING 
  id, 
  result_id, 
  ( try2 ).status,
  ( try2 ).no1.scores,
  ( try2 ).no1.duration,
  ( try2 ).no2.scores,
  ( try2 ).no2.duration,
  ( try2 ).no3.scores,
  ( try2 ).no3.duration,
  ( try2 ).no4.scores,
  ( try2 ).no4.duration,
  ( try2 ).no5.scores,
  ( try2 ).no5.duration,
  ( try2 ).no6.scores,
  ( try2 ).no6.duration,
  ( try2 ).checkmarks
`

type CreateStage1try2Row struct {
	ID       pgtype.UUID
	ResultID pgtype.UUID
	Column3  interface{}
	Column4  interface{}
	Column5  interface{}
	Column6  interface{}
	Column7  interface{}
	Column8  interface{}
	Column9  interface{}
	Column10 interface{}
	Column11 interface{}
	Column12 interface{}
	Column13 interface{}
	Column14 interface{}
	Column15 interface{}
	Column16 interface{}
}

func (q *Queries) CreateStage1try2(ctx context.Context, resultID pgtype.UUID) (CreateStage1try2Row, error) {
	row := q.db.QueryRow(ctx, createStage1try2, resultID)
	var i CreateStage1try2Row
	err := row.Scan(
		&i.ID,
		&i.ResultID,
		&i.Column3,
		&i.Column4,
		&i.Column5,
		&i.Column6,
		&i.Column7,
		&i.Column8,
		&i.Column9,
		&i.Column10,
		&i.Column11,
		&i.Column12,
		&i.Column13,
		&i.Column14,
		&i.Column15,
		&i.Column16,
	)
	return i, err
}
